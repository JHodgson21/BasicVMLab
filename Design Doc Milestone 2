Design Document 

 

Description: 

The UVSim is a simple virtual machine that executes programs written in BasicML machine language.  

 

User Stories: 

(User Story 1) 

As a UVSim developer 

I want to load and execute BasicML programs on the UVSim 

So that I can learn how machine language works and become more familiar with computer architecture.  

 

(User Story 2) 

As a client 

I want a UVSim for my students to learn machine language 

So that they can gain a deeper understanding of low-level programming concepts. 

 
(User Story 3)
As an end-user

I want to create a UVSim file that includes machine language instructions

So that functionality can be tested in a safe environment.


(User Story 4) 
As a UVSim stakeholder

I want to verify that the program ignores incorrect files

So that the program succeeds with integrity and security.



Use Cases:  

#1 Load Program 
-Jake
Description: This use case describes the process of loading a BasicML program into the UVSim memory starting at location 00 
Actors: Student  
System: UVSim 
Goal: Load a BasicML program in the UVSim memory starting at location 00 

Steps: 
1. Student inputs the BasicML program into UVSim 
2. The UVSim reads the input (a signed four-digit number) 
3. The UVSim stores each instruction into consecutive memory slots 
4. The UVSim validates that the program fits in the memory and that the instructions are valid instructions. 
5. The UVSim confirms to the user that the program loaded successfully 


#2 I/O Read 
Description: The program includes functionality to read a word from the keyboard and store it in a specified memory location.
Actors: Student
System: UVSim
Goal: Read a word from the keyboard into a specific location in memory.

#3 I/O Write
Description: The program can write a word from specific memory locations to the screen.
Actors: Student
System: UVSim
Goal: Write a word from a specific location in memory to the screen.

#4 Load Operations
Description: The program can load a word from a specific location in memory into the accumulator.
Actors: Student
System: UVSim
Goal: Load a word from a specific location in memory into the accumulator. 

#5 Addition Operation
-Jake
Description: This use case describes how to perform addition in the UVSim, adding one number from a specific place in memory to another in the accumulator. 
Actor: Student 
System: UVSim 
Goal: Perform addition between two numbers, one from memory and the other that's in the accumulator. 

Steps: 
1. Student initiates the Addition operation in the UVSim 
2. UVSim retrieves the number from the desired memory location 
3. UVSim adds the retrieved number to the number in the accumulator 
4. UVSim updates the accumulator with the result of the addition. 


#6 Subtraction Operation
-Jake
Description: This use case describes how to perform subtraction in the UVSim, subtracting one number from a specific place in memory to another in the accumulator. 
Actor: Student 
System: UVSim 
Goal: Perform subtraction between two numbers, one from memory and the other that's in the accumulator. 

Steps: 
1. Student initiates the Subtraction operation in the UVSim 
2. UVSim retrieves the number from the desired memory location 
3. UVSim subtracts the retrieved number to the number in the accumulator 
4. UVSim updates the accumulator with the result of the subtraction.

#7 Multiplication Operation
-Jarek
Description: This use case describes how to perform multiplication in the UVSim, multiplying one number from a specific place in memory to another in the accumulator.
Actor: Student
System: UVSim
Goal: Perform multiplication between two numbers, one from memory and the other that's in the accumulator.
Steps:
1. Student initiates the Multiplication operation in the UVSim
2. UVSim retrieves the number from the desired memory location
3. UVSim multiplies the retrieved number and the number in the accumulator
4. UVSim updates the accumulator with the result of the multiplication.

#8 Division Operation
-Jarek
Description: This use case describes how to perform division in the UVSim, dividing the number in the accumulator by another number in a specific place in memory.
Actor: Student
System: UVSim
Goal: Perform division between two numbers, one from memory (the divisor) and the other that's in the accumulator (the dividend).
Steps:
1. Student initiates the Division operation in the UVSim
2. UVSim retrieves the number from the desired memory location
3. UVSim divides the number in the accumulator by the retrieved number
4. UVSim updates the accumulator with the result of the division

#9 BRANCH Operation
-Jarek
Description: This use case describes how to perform a branch operation in the UVSim, branching to a specific place in memory.
Actor: Student
System: UVSim
Goal: Branch to a location specified by the operand.
Steps:
1. Student initiates the BRANCH operation in the UVSim
2. UVSim branches to the desired memory location

#10 BRANCHNEG Operation
-Jarek
Description: This use case describes how to perform a BRANCHNEG operation in the UVSim, branching to a specific place in memory only if the accumulator is negative.
Actor: Student
System: UVSim
Goal: Branch to a location specified by the operand if and only if the current value stored in the accumulator is a negative number.
Steps:
1. Student initiates the BRANCHNEG operation in the UVSim
2. UVSim checks if the value in the accumulator is less than zero
3. If it is, UVSim branches to the desired memory location, otherwise it does not