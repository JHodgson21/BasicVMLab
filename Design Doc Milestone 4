Design Document 

 

Description: 
The UVSim is a simple virtual machine that executes programs written in BasicML machine language.  

User Stories: 

(User Story 1) 
As a UVSim developer 
I want to load and execute BasicML programs on the UVSim 
So that I can learn how machine language works and become more familiar with computer architecture.  

(User Story 2) 
As a client 
I want a UVSim for my students to learn machine language 
So that they can gain a deeper understanding of low-level programming concepts. 

(User Story 3)
As an end-user
I want to create a UVSim file that includes machine language instructions
So that functionality can be tested in a safe environment.

(User Story 4) 
As a UVSim stakeholder
I want to verify that the program ignores incorrect files
So that the program succeeds with integrity and security.


Use Cases:  

#1 Load Program 
Description: This use case describes the process of loading a BasicML program into the UVSim memory starting at location 00 
Actors: Student  
System: UVSim 
Goal: Load a BasicML program in the UVSim memory starting at location 00 
Steps: 
1. Student inputs the BasicML program into UVSim 
2. UVSim reads the input (a signed four-digit or six-digit number) 
3. UVSim stores each instruction into consecutive memory slots, storing up to 250 instructions.
4. UVSim validates that the program fits in the memory and that the instructions are valid. 
5. UVSim confirms to the user that the program loaded successfully.

#2 I/O Read 
Description: The program includes functionality to read a word from the keyboard and store it in a specified memory location.
Actors: I/O Module (UVsim subsystem)
System: UVSim
Goal: Read a word from the keyboard into a specific location in memory.
Steps:
1. I/O module initiates the I/O READ operation.
2. I/O module prompts the user to enter an integer.
3. User inputs an integer via the keyboard.
4. UVSim validates the input as a four or six-digit number.
5. The I/O module stores the input integer in the specified memory location.

#3 I/O Write
Description: The program can write a word from specific memory locations to the screen.
Actors: I/O Module (UVSim subsystem)
System: UVSim
Goal: Write a word from a specific location in memory to the screen.
Steps:
1. I/O module initiates the I/O WRITE operation
2. I/O module retrieves the number from the specified memory location.
3. I/O module outputs the number to the screen. 

#4 Load Operations
Description: The program can load a word from a specific location in memory into the accumulator.
Actors: Memory Access Module
System: UVSim
Goal: Load a word from a specific location in memory into the accumulator. 
Steps:
1. Memory access module initiates the LOAD operation
2. Memory access module retrieves the number from the specified memory location.
3. Memory access module loads the number into the accumulator. 

#5 Addition Operation
Description: This use case describes how to perform addition in the UVSim, adding one number from a specific place in memory to another in the accumulator. 
Actor: Arithmetic Logic Unit (ALU)
System: UVSim 
Goal: Perform addition between two numbers, one from memory and the other that's in the accumulator. 
Steps: 
1. ALU initiates the Addition operation in the UVSim 
2. ALU retrieves the number from the desired memory location 
3. ALU adds the retrieved number to the number in the accumulator 
4. ALU updates the accumulator with the result of the addition. 

#6 Subtraction Operation
Description: This use case describes how to perform subtraction in the UVSim, subtracting one number from a specific place in memory to another in the accumulator. 
Actor: Arithmetic Logic Unit (ALU)
System: UVSim 
Goal: Perform subtraction between two numbers, one from memory and the other that's in the accumulator. 
Steps: 
1. ALU initiates the Subtraction operation in the UVSim 
2. ALU retrieves the number from the desired memory location 
3. ALU subtracts the retrieved number to the number in the accumulator 
4. ALU updates the accumulator with the result of the subtraction.

#7 Multiplication Operation
Description: This use case describes how to perform multiplication in the UVSim, multiplying one number from a specific place in memory to another in the accumulator.
Actor: Arithmetic Logic Unit (ALU)
System: UVSim
Goal: Perform multiplication between two numbers, one from memory and the other that's in the accumulator.
Steps:
1. ALU initiates the Multiplication operation in the UVSim
2. ALU retrieves the number from the desired memory location
3. ALU multiplies the retrieved number and the number in the accumulator
4. UVSim updates the accumulator with the result of the multiplication.

#8 Division Operation
Description: This use case describes how to perform division in the UVSim, dividing the number in the accumulator by another number in a specific place in memory.
Actor: Arithmetic Logic Unit (ALU)
System: UVSim
Goal: Perform division between two numbers, one from memory (the divisor) and the other that's in the accumulator (the dividend).
Steps:
1. ALU initiates the Division operation in the UVSim
2. ALU retrieves the number from the desired memory location
3. ALU divides the number in the accumulator by the retrieved number
4. ALU updates the accumulator with the result of the division

#9 BRANCH Operation
Description: This use case describes how to perform a branch operation in the UVSim, branching to a specific place in memory.
Actor: Control Unit
System: UVSim
Goal: Branch to a location specified by the operand.
Steps:
1. Control unit initiates the BRANCH operation in the UVSim
2. Control unit sets the instruction counter to the desired memory location. 

#10 BRANCHNEG Operation
Description: This use case describes how to perform a BRANCHNEG operation in the UVSim, branching to a specific place in memory only if the accumulator is negative.
Actor: Control Unit
System: UVSim
Goal: Branch to a location specified by the operand if and only if the current value stored in the accumulator is a negative number.
Steps:
1. Control unit initiates the BRANCHNEG operation in the UVSim
2. Control unit checks if the value in the accumulator is less than zero
3. If it is, UVSim branches to the desired memory location, otherwise it does not

#11 Editing Programs in GUI
Description: Edit BasicML program instructions within the UVSim GUI, including adding, modifying, deleting, cutting, copying and pasting instructions.
Actor: User/Student
System: UVSim GUI
Goal: Allow users to edit BasicML program instructions before execution.
Steps:
1. User loads a program into the UVSim GUI.
2. User edits program instructions directly within the GUI interface.
3. UVSim GUI validates and updates the program instructions in memory.
4. UVSim GUI confirms to the user that edits are saved and ready for execution.

#12 Saving Edited Programs
Description: Save edited BasicML programs from the UVSim GUI to the file system under a user-chosen directory and filename.
Actor: Student
System: UVSim GUI
Goal: Allow users to save edited BasicML program instructions to a '.txt' file.
Steps:
1. User edits a program within the UVSim GUI from any user-specified folder/directory.
2. User clicks the 'Save Program' button in the UVSim GUI.
3. UVSim GUI prompts the user to choose any directory and enter a new filename.
4. UVSim GUI saves the edited program instructions as a '.txt' file in the user-specified folder/directory. 
